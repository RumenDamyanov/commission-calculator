#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

use App\Service\BinLookupService;
use App\Service\ExchangeRateService;
use App\Service\CommissionCalculator;
use App\Service\RateLimitService;
use App\Helper\CountryHelper;
use App\DTO\Transaction;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

// Load environment variables.
$dotenv = new \Symfony\Component\Dotenv\Dotenv();
$dotenv->load(__DIR__ . '/../.env');

// Set up cache.
$cache = new FilesystemAdapter();

// Set up HTTP client.
$httpClient = HttpClient::create();

// Set up helpers.
$countryHelper = new CountryHelper();

// Set up rate limiters.
$binLookupRateLimiter = new RateLimitService(
    $cache,
    'bin_lookup',
    (int) ($_ENV['BIN_LOOKUP_RATE_LIMIT'] ?? 100),
    60
);

$exchangeRateRateLimiter = new RateLimitService(
    $cache,
    'exchange_rate',
    (int) ($_ENV['EXCHANGE_RATES_RATE_LIMIT'] ?? 30),
    60
);

// Set up services.
$binLookupService = new BinLookupService(
    $httpClient,
    $cache,
    $countryHelper,
    $binLookupRateLimiter,
    $_ENV['BIN_LOOKUP_URL'] ?? 'https://lookup.binlist.net',
    5,
    (int) ($_ENV['BIN_LOOKUP_CACHE_TTL'] ?? 3600)
);

// Set up services.
$exchangeRateService = new ExchangeRateService(
  $httpClient,
  $cache,
  $exchangeRateRateLimiter,
  $_ENV['EXCHANGE_RATES_URL'] ?? 'https://api.apilayer.com/exchangerates_data/latest',
  $_ENV['EXCHANGE_RATES_API_KEY'] ?? '',
  5,
  (int) ($_ENV['EXCHANGE_RATES_CACHE_TTL'] ?? 3600)
);

// Set up calculator.
$calculator = new CommissionCalculator(
    $binLookupService,
    $exchangeRateService,
    $countryHelper,
    (float) ($_ENV['EU_COMMISSION_RATE'] ?? 0.01),
    (float) ($_ENV['NON_EU_COMMISSION_RATE'] ?? 0.02)
);

// Process input file.
$inputFile = $argv[1] ?? null;
if (!$inputFile) {
    die("Please provide an input file path\n");
}

if (!file_exists($inputFile)) {
    die("Input file not found: $inputFile\n");
}

$lines = file($inputFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
if ($lines === false) {
    die("Failed to read input file\n");
}

// Set up output file.
$outputFile = __DIR__ . '/../data/output.txt';
$outputDir = dirname($outputFile);

// Create output directory if it doesn't exist.
if (!is_dir($outputDir)) {
    if (!mkdir($outputDir, 0777, true)) {
        die("Failed to create output directory: $outputDir\n");
    }
}

// Clear previous output file.
file_put_contents($outputFile, '');

foreach ($lines as $line) {
    try {
        $data = json_decode($line, true);
        if (!$data) {
            throw new Exception("Invalid JSON: $line");
        }

        $transaction = new Transaction(
            $data['bin'] ?? '',
            (float) ($data['amount'] ?? 0),
            $data['currency'] ?? ''
        );

        $commission = $calculator->calculate($transaction);
        $result = number_format($commission->getAmount(), 2) . "\n";

        // Write to both terminal and file.
        echo $result;
        file_put_contents($outputFile, $result, FILE_APPEND);
    } catch (Exception $e) {
        $error = "Error processing line '$line': " . $e->getMessage() . "\n";
        fwrite(STDERR, $error);
        file_put_contents($outputFile, "ERROR: $error", FILE_APPEND);
    }
}
