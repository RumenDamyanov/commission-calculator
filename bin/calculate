#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\Dotenv\Dotenv;

// Load environment variables.
$dotenv = new Dotenv();
$dotenv->load(__DIR__ . '/../.env');

// Create container.
$container = new ContainerBuilder();

// Load configuration.
$loader = new YamlFileLoader($container, new FileLocator(__DIR__ . '/../config'));
$loader->load('services.yaml');

// Compile container.
// Note: The 'true' parameter is necessary to resolve the environment variables.
$container->compile(true);

// Get services from container.
try {
    $calculator = $container->get(App\Service\CommissionCalculator::class);
} catch (Exception $e) {
    echo "\nError getting CommissionCalculator:\n";
    echo $e->getMessage() . "\n";
    echo "Trace:\n" . $e->getTraceAsString() . "\n";
}

// Process input file.
$inputFile = $argv[1] ?? null;
if (!$inputFile) {
    die("Please provide an input file path\n");
}

if (!file_exists($inputFile)) {
    die("Input file not found: $inputFile\n");
}

$lines = file($inputFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
if ($lines === false) {
    die("Failed to read input file\n");
}

// Set up output file.
$outputFile = __DIR__ . '/../data/output.txt';
$outputDir = dirname($outputFile);

// Create output directory if it doesn't exist.
if (!is_dir($outputDir)) {
    if (!mkdir($outputDir, 0777, true)) {
        die("Failed to create output directory: $outputDir\n");
    }
}

// Clear previous output file.
file_put_contents($outputFile, '');

foreach ($lines as $line) {
    try {
        $data = json_decode($line, true);
        if (!$data) {
            throw new Exception("Invalid JSON: $line");
        }

        $transaction = new \App\DTO\Transaction(
            $data['bin'] ?? '',
            (float) ($data['amount'] ?? 0),
            $data['currency'] ?? ''
        );

        $commission = $calculator->calculate($transaction);
        $result = number_format($commission->getAmount(), 2) . "\n";

        // Write to both terminal and file.
        echo $result;
        file_put_contents($outputFile, $result, FILE_APPEND);
    } catch (Exception $e) {
        $error = "Error processing line '$line': " . $e->getMessage() . "\n";
        fwrite(STDERR, $error);
        file_put_contents($outputFile, "ERROR: $error", FILE_APPEND);
    }
}
